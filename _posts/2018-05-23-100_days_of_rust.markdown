---
layout:      post
title:       "100 days of Rust"
date:        2018-05-23 12:00:00
update-date: 2018-05-30 12:00:00
author:      "Alexandre"
comments:    True

---

## Motivations

I became interested in Rust when I heard about safety. Buffer overruns or some sort of mishandling of memory cause a lot of vulnerabilites. [There is an interesting discussion about that on reddit](https://www.reddit.com/r/rust/comments/5y3cxb/how_many_security_exploits_would_rust_prevent/). It is a bit biased because it's on [/r/rust](https://reddit.com/r/rust).

People claim that you _just have to git gud_ (and usually claim that _they_ write
bug free C or C++). Yet super experienced developers are making those bugs. Rust appears
to be an interesting way of avoiding these kind of bugs **by design**, and without runtime cost.

An interesting debate is [whether or not we should rewrite everything in Rust.](https://robert.ocallahan.org/2016/02/rewrite-everything-in-rust.html). (I'm not
sure that's a pratical solution).

It was enough to spark my interest. Even if I don't end up [rewriting everything in Rust](https://github.com/ansuz/RIIR), I will probably learn interesting concepts along the way.

I'm not a total newbie, I have already started two projects:

1. [A web server](https://github.com/achntrl/rust-webserver): That was my first non "Hello World!" program, trying to understand how a web server might work and learning Rust at the same time. It was over a year ago.
2. [An SQLite clone](https://github.com/achntrl/sqlite-rust): I started 4 months ago, based on [cstack tutorial](https://cstack.github.io/db_tutorial/) on how to write a db. I struggled because my knowledge of the language wasn't good and I struggled to manage allocations of Rows and Pages.

Then, I was preparing interviews so I focused on that. Now that I got the job (Yay! ðŸŽ‰), I can get back at it.

## Resources

I will start with the [Rust book](https://doc.rust-lang.org/book/second-edition/index.html).

I will then port a program I wrote for some homework: [a http log monitoring program](https://github.com/achntrl/HttpLogMonitoring).

From then, I have three options that I find interesting:

- Get back at the database
- Write an OS following [CS140e from Stanford](http://web.stanford.edu/class/cs140e/) or [Philipp Oppermann's blog](https://os.phil-opp.com/)
- Contribute to an open source project

## The plan

The plan is to spend at least an hour per day coding in Rust and to write about my
learnings and my struggles.

Starting today!

## Week 1

### Day 1 (1h)

I read the Rust Book, second edition on ownership, structs and pattern matching.
It's nicer than the first edition, the explaination are more detailled than in the
first edition.

I have not much to say today, because I am re-learning things I vaguely knew. I do feel
that I have a better understanding of ownership now.

I don't want to spend too much time reading the docs because I might lose interest without
a real problem. On the cool side, I noticed a part about parsing CLI inputs in the book. That will be relevant for the http log monitoring program.

I will try to reach that part by tomorrow, so I can build something!

### Day 2 (1h)

Today, I read some sections of the Rust book (modules and common collections). It is taking longer than expected because
the doc if really thourough.

The section 8.2 about `String` and UTF-8 is very interesting.

### Day 3 (1h)

I read about error handling, generic types and lifetimes. This has always been a part I
never really understood. I think it's clearer now, but I need to write some code to
apply this knowledge.

Fortunately tomorrow, I will reach the Testing, and then the I/O program to write some
real code.

## Day 4 (45min)

I read about Testing and experimented a bit on my own. It's nice to have everything built
into the language and not import external libs (`unittest` or `pytest` comes to mind).

It seems to lack the `assert_almost_equals` and other syntaxic sugar that I am used to.

It is also a bit depressing not to have reached the coding part yet.

## Day 5 (45min)

Finally, I started coding! It took longer than expected but I'm getting there. It was
frustrating to read interesting stuff and not code.

I went with the `minigrep` example, trying to code ahead of the code blocks. I don't regret
the time I spent reading the book because I understood all the compile error I got. I even
foreseen some of them. It is definitely a step up from last time, when I would try to add
`&`, `mut`, `str`/`String` and lifetime until it compiles. I stopped halfway through the chapter
as I had to go to work.

## Day 6 (2h)

I was excited to come home and continue coding! I went through the exercice, wrote some tests
and refactored the code.

I also read the chapter on functional language features and the chapter on cargo.
I will now work on the port of my log monitoring program.

I will stop reading the books by large chunks and focus more on coding.
There are 31 chapters left, I can take my time. I might need the chapter on concurrency for the port
but not right from the start.
